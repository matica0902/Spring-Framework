
The Spring Framework use the skill recreate a MVC process design pattern.So you can use the JSP architecher to compare 
what is the differences with Spring  approach to building RESTful web services !!
Reference URL :
https://spring.io/guides/gs/consuming-rest/==>啟動WEB-SEVICE WITH GET AND POST
https://spring.io/guides/gs/integration/   ==>
https://spring.io/guides/gs/spring-boot/   ==>類似開機啟動JAVA BEAN 
https://spring.io/guides/gs/serving-web-content/    ==>建立一完整 WEB 前後端 但尚未連結DATABASE
https://spring.io/guides/gs/relational-data-access/ ==>使用JDBC 新增 修改 刪除 資料庫
https://spring.io/guides/gs/accessing-data-mysql/   ==>與資料庫連結取代 drivermanager
https://spring.io/guides/gs/handling-form-submission/ ==>使用 th:action="@{/greeting}",th:object="${greeting}",th:field="{id}"
                                                         th:field="{content}" expression 代替JSTL EL 標籤!

STEP 0)ABOUT  The  /greeting type look like instead of a string type of a response.

1.The service will handle GET requests for /greeting, optionally with a name parameter in the query string. 
2.The GET request should return a 200 OK response with JSON in the body that represents a greeting. 
3.It should look something like this:

{
    "id": 1,
    "content": "Hello, World!"
}


STEP 1)Creat a Request 


src/main/java/hello/Greeting.java
package hello;
public class Greeting {

    private final long id;
    private final String content;

    public Greeting(long id, String content) {
        this.id = id;
        this.content = content;
    }

    public long getId() {
        return id;
    }

    public String getContent() {
        return content;
    }
}

P.S. As you see in steps below, Spring uses the Jackson JSON library to automatically marshal instances of type Greeting into JSON.

STEP 2) Create a resource controller


package hello;
import java.util.concurrent.atomic.AtomicLong;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreetingController {

    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
}



STEP 3)  Make the application executable

src/main/java/hello/Application.java
package hello;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}


STEP 4)Build an executable JAR

1.If you are using [Gradle], you can run the application using ./gradlew bootRun. Or you can build the JAR file using ./gradlew build.
Then you can run the JAR file:

java -jar build/libs/gs-rest-service-0.1.0.jar

2.If you are using [Maven], you can run the application using ./mvnw spring-boot:run.
Or you can build the JAR file with ./mvnw clean package. Then you can run the JAR file:

java -jar target/gs-rest-service-0.1.0.jar

3.Test the service

Now that the service is up, visit http://localhost:8080/greeting, where you see:


{"id":1,"content":"Hello, World!"}




STEP )

